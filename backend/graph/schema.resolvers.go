package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"video-to-article/backend/core/article"
	"video-to-article/backend/core/database"
	"video-to-article/backend/graph/model"
)

// CreateArticleFromVideo is the resolver for the createArticleFromVideo field.
func (r *mutationResolver) CreateArticleFromVideo(ctx context.Context, videoURL string) (*model.Article, error) {
	generatedArticle, err := article.GenerateArticle(videoURL)
	if err != nil {
		return nil, err
	}

	err = database.SaveArticle(generatedArticle)
	if err != nil {
		return nil, err
	}
	fmt.Println("hi")

	return convertToGraphQLArticle(generatedArticle), nil
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*model.Article, error) {
	article, err := database.GetArticle(id)
	if err != nil {
		return nil, err
	}
	return convertToGraphQLArticle(article), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
