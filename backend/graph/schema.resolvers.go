package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"video-to-article/backend/graph/model"
)

// CreateArticleFromVideo is the resolver for the createArticleFromVideo field.
func (r *mutationResolver) CreateArticleFromVideo(ctx context.Context, videoURL string) (*model.Article, error) {
	// TODO: Implement actual video processing and article generation
	// This is a placeholder implementation
	article := &model.Article{
		ID:      "1",
		VideoID: "1",
		Content: fmt.Sprintf("This is a generated article from the video: %s", videoURL),
		TableOfContents: []*model.TableOfContentsItem{
			{Title: "Introduction", Timestamp: 0},
			{Title: "Main Content", Timestamp: 60},
			{Title: "Conclusion", Timestamp: 120},
		},
	}
	return article, nil
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id string) (*model.Video, error) {
	// TODO: Implement video retrieval
	return &model.Video{ID: id, Title: "Sample Video", URL: "https://example.com/video.mp4"}, nil
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*model.Article, error) {
	// TODO: Implement article retrieval
	return &model.Article{
		ID:      id,
		VideoID: "1",
		Content: "Sample article content",
		TableOfContents: []*model.TableOfContentsItem{
			{Title: "Introduction", Timestamp: 0},
			{Title: "Main Content", Timestamp: 60},
			{Title: "Conclusion", Timestamp: 120},
		},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
